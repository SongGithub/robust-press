{{- $config := (datasource "config") -}}
---
AWSTemplateFormatVersion:  "2010-09-09"
Description: "This stack serves as foundation for the app. It contains VPC, subnet, NAT, EIP, etc"
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: {{ $config.infra.vpcCIDR }}
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}

  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
              - "vpc-flow-logs.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      RoleName: {{ $config.global.environmentName }}-vpc-flow-log

  FlowLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "allow_cw_logs"
      PolicyDocument:
        Statement:
        -
          Effect: "Allow"
          Action:
           - "logs:CreateLogGroup"
           - "logs:CreateLogStream"
           - "logs:PutLogEvents"
           - "logs:DescribeLogGroups"
           - "logs:DescribeLogStreams"
          Resource: "*"
      Roles:
        -
          !Ref FlowLogRole

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{ $config.global.environmentName }}-flow-logs
      RetentionInDays: {{ $config.infra.vpcFlowLogRetention }}

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn : !GetAtt FlowLogRole.Arn
      LogGroupName : !Ref CloudWatchLogGroup
      ResourceId : !Ref VPC
      ResourceType : VPC
      TrafficType : ALL

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 0, {{ $config.infra.publicSubnetCIDR }} ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-public-a

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 1, {{ $config.infra.publicSubnetCIDR }} ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-public-b

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 2, {{ $config.infra.publicSubnetCIDR }} ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-public-c


  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 0, {{ $config.infra.privateSubnetCIDR }} ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-private-a

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 1, {{ $config.infra.privateSubnetCIDR }} ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-private-b

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 2, {{ $config.infra.privateSubnetCIDR }} ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-private-c

  DBSubnet:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: subnet for db
      DBSubnetGroupName: dbSubnet
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-db

  PublicServiceSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, {{ $config.infra.availabilityZones }} ]
      CidrBlock: !Select [ 3, {{ $config.infra.publicSubnetCIDR }} ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-service-c

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayCEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCEIP.AllocationId
      SubnetId: !Ref PublicSubnetC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-public

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  PublicServiceSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicServiceSubnet

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-private-a

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-private-b

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: {{ $config.global.environmentName }}-private-c

  DefaultPrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

Outputs:
  VpcId:
    Description: ID of the created VPC
    Value: !Ref VPC
    Export:
      Name: !Join ["-", ["VpcId", {{ $config.global.environmentName }}]]

  VpcName:
    Description: Name of the created VPC
    Value: {{ $config.global.environmentName }}-vpc
    Export:
      Name: !Join ["-", ["VpcName", {{ $config.global.environmentName }}]]

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC ]]
    Export:
      Name: !Join ["-", ["PublicSubnets", {{ $config.global.environmentName }}]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB, !Ref PrivateSubnetC ]]
    Export:
      Name: !Join ["-", ["PrivateSubnets", {{ $config.global.environmentName }}]]

  NetworkCidr:
    Description: Network cidr used by {{ $config.global.environmentName }}.
    Value: {{ $config.infra.vpcCIDR }}
    Export:
      Name: !Join ["-", ["NetworkCidr", {{ $config.global.environmentName }}]]

  NatGateways:
    Description: Natgateway logical ids in
    Value: !Join [ ",", [ !Ref NatGatewayA, !Ref NatGatewayB, !Ref NatGatewayC ]]
    Export:
      Name: !Join ["-", ["NatGateways", {{ $config.global.environmentName }}]]

  PublicServiceSubnet:
    Description: Service subnet which is used to provision utilities e.g. bastion.
    Value: !Ref PublicServiceSubnet
    Export:
      Name: !Join ["-", ["PublicServiceSubnet", {{ $config.global.environmentName }}]]

  DBSubnet:
    Description: The DB subnet.
    Value: !Ref DBSubnet
    Export:
      Name: !Join ["-", ["DBSubnet", {{ $config.global.environmentName }}]]
