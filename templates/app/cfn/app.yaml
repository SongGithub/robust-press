{{- $config := (datasource "config") -}}
---
AWSTemplateFormatVersion: 2010-09-09
Description: "This stack maintains app related resources, such as ELB, ASG, and EC2"
Resources:

  EC2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub loggroup-ec2-{{ $config.global.environmentName }}
      RetentionInDays: 7

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 3600
      Subnets:
        Fn::Split:
          - ','
          - Fn::ImportValue:
              Fn::Sub: PublicSubnets-{{ $config.global.environmentName }}
      CrossZone: true
      SecurityGroups:
      - Fn::ImportValue:
              Fn::Sub: ELBSecurityGroup-{{ $config.global.environmentName }}
      Scheme: "internet-facing"
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '8000'
        Protocol: TCP
        InstanceProtocol: TCP
      HealthCheck:
        Target: !Sub HTTP:8000/wp-admin/install.php
        HealthyThreshold: "2"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EC2-ELB

  EC2ASG:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: {{ $config.app.pauseTime }}
        WaitOnResourceSignals: True
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Fn::Split:
          - ','
          - Fn::ImportValue:
              Fn::Sub: PrivateSubnets-{{ $config.global.environmentName }}
      DesiredCapacity: {{ $config.app.replicaCount }}
      HealthCheckGracePeriod: 500
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref EC2ServerLaunchConfiguration
      LoadBalancerNames:
      - !Ref ElasticLoadBalancer
      MinSize: {{ $config.app.minCount }}
      MaxSize: {{ $config.app.maxCount }}
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-wordpress
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: {{ $config.app.replicaCount }}
        Timeout: {{ $config.app.pauseTime }}

  EC2ServerLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        awsLogConfig:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${EC2LogGroup}
                [/var/log/amazon/ssm/errors.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/errors.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
                log_group_name = ${EC2LogGroup}
                [/var/log/audit/audit.log]
                file = /var/log/audit/audit.log
                log_stream_name = {instance_id}/var/log/audit/audit.log
                log_group_name = ${EC2LogGroup}
                [/var/log/awslogs.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/awslogs.log
                log_stream_name = {instance_id}/var/log/awslogs.log
                log_group_name = ${EC2LogGroup}
                [/var/log/boot.log]
                file = /var/log/boot.log
                log_stream_name = {instance_id}/var/log/boot.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-wire.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-wire.log
                log_stream_name = {instance_id}/var/log/cfn-wire.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${EC2LogGroup}
                [/var/log/maillog]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/maillog
                log_stream_name = {instance_id}/var/log/maillog
                log_group_name = ${EC2LogGroup}
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${EC2LogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${EC2LogGroup}
                [/var/log/yum.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/yum.log
                log_stream_name = {instance_id}/var/log/yum.log
                log_group_name = ${EC2LogGroup}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
    Properties:
      KeyName: {{ $config.app.keyPairName }}
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: {{ $config.global.amiID }}
      InstanceType: {{ $config.app.instanceType }}
      SecurityGroups:
      - Fn::ImportValue:
          BastionAccessSecurityGroup-{{ $config.global.environmentName }}
      - Fn::ImportValue:
          WebSecurityGroup-{{ $config.global.environmentName }}

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Start cfn-init
          yum update -y && yum install -y aws-cfn-bootstrap python unzip tar.x86_64
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          export PATH=/usr/local/bin:$PATH
          aws --version
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2ServerLaunchConfiguration || error_exit
          export AWS_DEFAULT_REGION=${AWS::Region}
          db_addr=$(aws rds describe-db-instances --query 'DBInstances[0].Endpoint.Address' --output text)
          echo $db_addr
          db_root_password=$(aws ssm get-parameters --name {{ $config.db.rootPasswordSSM }} --with-decryption --query 'Parameters[*].Value' --output text)
          aws s3 cp s3://{{ $config.artifactStore.name }}/wpContent{{ $config.artifact_version }}.tar.gz the_artifact
          mkdir -p wp-content && tar xf the_artifact -C wp-content
          image="wordpress:5.1.0-php7.1-apache"
          docker run -d -p 8000:80 \
            -e WORDPRESS_DB_HOST="$db_addr":3306 \
            -e WORDPRESS_DB_USER=wordpress \
            -e WORDPRESS_DB_PASSWORD="$db_root_password" \
            -v $PWD/wp-content:/var/www/html/wp-content "$image"

          echo '### Wait until instance is registered as healthy in the ELB'
          until [ "$state" == "InService" ]; do
            state=$(aws --region ${AWS::Region} elb describe-instance-health \
                        --load-balancer-name ${ElasticLoadBalancer} \
                        --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
                        --query InstanceStates[0].State \
                        --output text)
            sleep 10
          done

          # signal success
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2ASG

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ServerInstanceRole-{{ $config.global.environmentName }}
      Path: /wp/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Sub server-{{ $config.global.environmentName }}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:*
                - elasticloadbalancing:DescribeInstanceHealth
                - autoscaling:DescribeTags
              Resource: "*"
        - PolicyName: create-log-stream
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:Describe*
              Resource: !GetAtt EC2LogGroup.Arn
        - PolicyName: allow-metric-data
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - cloudwatch:PutMetricData
              - cloudwatch:EnableAlarmActions
              - cloudwatch:PutMetricAlarm
              Resource: "*"
        - PolicyName: allow-access-rds
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - "rds:*"
              Resource: "*"
        - PolicyName: allow-access-s3-artifacts
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - "s3:Get*"
              - "s3:List*"
              Resource: "*"
        - PolicyName: allow-access-ssm-parameters
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - "ssm:Describe*"
              - "ssm:Get*"
              - "ssm:List*"
              Resource: "*"

Outputs:
  ElasticLoadBalancer:
    Description: LB for the app
    Value: !Ref ElasticLoadBalancer
    Export:
      Name: !Sub ElasticLoadBalancer-{{ $config.global.environmentName }}
  ElasticLoadBalancerDNS:
    Description: DNS name of the LB for the app
    Value: !GetAtt ElasticLoadBalancer.DNSName
    Export:
      Name: !Sub ElasticLoadBalancerDNS-{{ $config.global.environmentName }}
